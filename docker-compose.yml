services:
  news-scraper:
    image: scraper:1.1
    container_name: news-scraper
    command: ["python", "/news_scraper/news_scraper.py"]
    volumes:
      - ./news_scraper:/news_scraper
    networks:
      - scraper_network
    depends_on:
      - prometheus
      - grafana
      - kafka
      - postgres
      - kafka_to_postgres
      - rss
    restart: no

  binance-websocket:
    image: scraper:1.1
    container_name: binance-websocket
    command: ["python", "/binance_websocket/binance_websocket.py"]
    volumes:
      - ./binance_websocket:/binance_websocket
    networks:
      - scraper_network
    depends_on:
      - prometheus
      - grafana
      - kafka
      - postgres
    restart: no

  kafka-to-postgres:
    image: scraper:1.1
    container_name: kafka-to-postgres
    command: ["python", "/kafka_to_postgres/kafka_to_postgres_consumer.py"]
    environment:
      KAFKA_CONSUMER_PG_PASS: ${KAFKA_CONSUMER_PG_PASS}
    volumes:
      - ./kafka_to_postgres:/kafka_to_postgres
    networks:
      - scraper_network
    depends_on:
      - prometheus
      - grafana
      - kafka
      - postgres
    restart: no

  rss:
    image: scraper:1.1
    container_name: rss
    command: ["python", "/rss/rss.py"]
    volumes:
    - ./rss:/rss
    networks:
    - scraper_network
    ports:
      - '5000:5000'
    depends_on:
    - prometheus
    - grafana
    - kafka
    - postgres
    restart: no


  zookeeper:
    image: docker.io/bitnami/zookeeper:3.9
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - '2181:2181'
    networks:
      - scraper_network
    restart: no

  kafka:
    image: docker.io/bitnami/kafka:3.4
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: INTERNAL://:9092,EXTERNAL://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:SSL
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_TLS_TYPE: JKS
      KAFKA_CERTIFICATE_PASSWORD: ${CERTIFICATE_PASS}
      KAFKA_SSL_CLIENT_AUTH: 'required'
      KAFKA_CLIENT_USERS: kafka_crypto_monitor
      KAFKA_CLIENT_PASSWORDS: ${KAFKA_CLIENT_PASSWORDS}
      KAFKA_CFG_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM:
    volumes:
      - "./kafka_creds/keystore/kafka.keystore.jks:/bitnami/kafka/config/certs/kafka.keystore.jks"
      - "./kafka_creds/truststore/kafka.truststore.jks:/bitnami/kafka/config/certs/kafka.truststore.jks"
      - ./kafka_data:/bitnami/kafka/data
    networks:
      - scraper_network
    restart: no
    depends_on:
      - zookeeper

  postgres:
    image: postgres:12.20-alpine3.20
    container_name: postgres
    environment:
      POSTGRES_USER: postgres_crypto_monitor
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: news
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data/pgdata
    networks:
      - scraper_network

  prometheus:
    image: prom/prometheus:v2.55.0-rc.0
    container_name: prometheus
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    networks:
      - scraper_network

  grafana:
    image: grafana/grafana:11.2.2
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana_storage:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - scraper_network

networks:
  scraper_network:
    driver: bridge